Building bridges
... between IRC and Discord

14:06 19 July 2019
Tags: chatbot, irc, discord, bridges

Qais Patankar
me@qaisjp.com
https://qais.jp
@qaisjp

* Notes

If you want to follow along you can find this talk at [[slides.qais.jp]]

* Background

I'm part of a computing club back at my home university: [[https://comp-soc.com][CompSoc Edinburgh]].

: I'm part of a computing club back at my home university. There's a lot of alumni who hang out on IRC and share useful advice. Now that's great, but it's difficult to convince new students to join, and there's one big issue with IRC that makes it harder for them to stay.

We have a lot of "old" people who hang out and still use IRC.

New users don't like IRC because they can't see the chat history, so I decided to create a Discord server and bridge the two together!

: So I started a Discord server and decided to bridge the two!

.image building-bridges/img/team_chat_2x.png 300 _
.caption _Team_Chat_ by [[https://xkcd.com/1782/][Randall Munroe]]
.caption [[slides.qais.jp]]

* What's IRC?

: Most of the developers here will be familiar with IRC. It's basically a protocol for chatting with others either directly or in channels.
: 
: The big issue with IRC is that you don't get access to full chat history. The only way to see the chat history is if you use an intermediary server that relay messages back to you when you wake up.

Internet Relay Chat, a protocol for chatting on the internet.

Messages aren't persisted, so you must be connected to the server to receive them.

If you want to receive messages whilst disconnected, you need to use a bouncer.

.image building-bridges/img/znc.png _ 300
.caption Source: [[https://wiki.znc.in/ZNC][ZNC]], an open-source IRC bouncer

* What's Discord?

: Discord is basically Slack but it's invite link system and free chat history makes it more attractive to online communities.
: 
: Plus, it's got a pretty great permissions system.

Discord is like Slack but catered towards online communities.

- accounts are central (on IRC each server has their own account system)
- unlimited, persisted chat history
- not open source

*Why*not*Slack?*

- you need an account per workspace
- no open/public invites (until a few years ago)
- the free tier is inflexible and has a limited chat history

.image https://discordapp.com/assets/fc0b01fe10a0b8c602fb0106d8189d9b.png _ 300

# : Discord is like Slack, but it's more... open, and it's free.
# : It's built with gaming communities in mind, so it integrates an invite system and streamlined permission system.
# : 
# : Oh and when I say "guild", I basically mean a "discord server", which is equivalent to a Slack workspace or team.

* Existing bridges

: So lets talk about what existing bridges do

* 

: this is a picture of IRCCloud, which is an online IRC client that also behaves a bit like a bouncer. 
: 
: When someone on Discord sends a messsage, the bot sends the same message to IRC using its IRC bot connection.
: So that's why it shows up as IRC here.
: 
: Similarly when Eve (on IRC) sends a message, it's sent to everyone in the IRC channel, including DiscordBot.

.background building-bridges/img/irc-conversation-annotated.png
# .image building-bridges/img/irc-conversation-annotated.png 500 _


* A typical bridged channel (discord)

: So the bot on Discord then, named "irc", sends messages in the corresponding Discord channel.

.image building-bridges/img/discord-conversation.png 300 _
.caption the bot named "irc" sends messages with a username prefix `<Eve>`

# .caption "discord guild" = "discord server" (= "slack workspace")

* We can do better: puppeting

: but we can do better by puppeting

* Creating puppets

When the bridge starts, we create an IRC connection for every online Discord user.

    connections[discordUser.ID] = ircConnection

When one of these Discord users go offline, we can close the connection.

When they come online, we can simply (re)create the connection.


.image building-bridges/img/discord-online.gif 250 _
.caption When I appear online on Discord, a `qaisjp~d` irc puppet is created.

* Challenges

Puppeting leads to the following challenges:

- *nickname*normalization*: dealing with special characters in nicknames
- *moderation*: how can irc ops moderate Discord users without Discord permissions?
- *discord*webhook*management*: making it look pretty on Discord too
- *nickalert/mentions*conversion*: how do we ping a Discord user?
- *converting*between*text*formats*: Markdown and IRC control codes
- *priviliged*channel*access*: discord users should not be in every bridged channel

.caption During this talk we'll only be discussing the first three challenges. Feel free to ask me about the others!

* irc nickname normalisation

irc usernames support pretty much just `[A-Za-z_]`, whereas Discord supports special characters. Lets take this username:

: irc usernames are pretty much just alphanumeric, so we have to normalise Discord usernames, otherwise we might drop connections. Lets take this username

    Test!@$User

If we replace all invalid characters with underscore characters, we'll be left with a username containing three underscores

    Test___User    # not visually clean!

So we instead replace all illegal characters with a single whitespace character. And then we replace all sequences of spaces with a single underscore character.

	newNick = regexp.MustCompile(` +`).ReplaceAllLiteral(newNick, []byte{'_'})

Leaving us with just `Test_User`. We tack on `~d` to the end so that Discord users can be differentiated from IRC users.

    Test_User~d

* irc nickname normalisation: edge case

What if we have two Discord users with similar names?

    Test!!!User
    Test$$$User

Both of these normalise to `Test_User`. But IRC nicknames must be unique!

*Solution:* fallback on discriminator

Since Discord usernames aren't unique, Discord assigns each user a four digit suffix

    qaisjp        # `username`               (not globally unique)
    qaisjp#7247   # `username#discriminator` (globally unique)

So if two nicknames clash, we simply connect to IRC using the four digit suffix

    Test_User~1234~d
    Test_User~9876~d

.caption There's also a "server specific nickname", not mentioned here for simplicity

* irc channel moderation: the problem

IRC users are identified using _hostmasks_:

    nickname!username@host    # The nickname and username are freely set by the irc client

Hostmasks are derived from your IP address when you connect:

    alice!hexchat@209.85.128.1    # without a PTR record
    bob!robert@118-75-212-24.try.wideopenwest.com    # with a PTR record

Channel operators (admins) needs to be able to target the hostmask to restrict specific user access _without_ affecting every bridge user.

But since the bridge creates the irc puppets, all of them will have the same IP address, and therefore will share the second half of the hostmask.

`WEBIRC` is an ircv3 extension that solves this issue.

* irc channel moderation: the solution

The `WEBIRC` command must be the first command sent to an IRC server.

(Think HTTP's `X-Forwarded-For`, but for IRC.)

*Parameters*

- `gateway`: WebIRC gateway service name
- `password`: authenticates the WebIRC gateway to the IRC server
- `ip`: address of the connecting user
- `hostname`: user’s resolved hostname

: this password is agreed upon ahead of time, and is necessary to ensure that only the gateway (bridge) is authorised to provide source IP addresses.

.image building-bridges/img/ircv3-logo-forwhite.svg _ 200
.caption Source: [[https://ircv3.net/specs/extensions/webirc.html][ircv3.net/specs/extensions/webirc.html]]
.caption Copyright © 2017 Evan Magaliff <muffinmedic@kiwiirc.com>, Darren Whitlen <prawnsalad@kiwiirc.com>

* Using WEBIRC: providing a private IPv6 address

Discord users/mods don't get access to user IP addresses & usernames can be changed, so we cannot rely on usernames/discriminators (`qaisjp#7247`)

: per Discord user.

: Discord usernames can be changed, so we cannot rely on usernames/discriminators

We can still rely on user IDs. Mine looks like this: `83386293446246400`

So we include it in the hostname: `$userID.bot.discord` or `$userID.user.discord`

And convert the user ID to a [[https://en.wikipedia.org/wiki/Unique_local_address][unique local address]]:

    Base IP for bots: "fd75:f5f5:226f:2", or users: "fd75:f5f5:226f:1"

    Format uint64 as hexadecimal, then left pad (16 chars) 
        83386293446246400 -> 1283f6460000000 -> 01283f6460000000
    
    Insert a colon every four places (actually, where i%4 == 0)
        :0128:3f64:6000:0000

    Append to the base address
        fd75:f5f5:226f:1:0128:3f64:6000:0000

.caption User IDs use the `snowflake` format. It's out of scope for this talk, but they were [[https://github.com/twitter-archive/snowflake/tree/snowflake-2010][created by Twitter]] and are [[https://discordapp.com/developers/docs/reference#snowflakes][pretty cool]].

* Discord
: So we've been talking a lot of about IRC. 

.image building-bridges/img/discord-to-irc.png 300 _
.caption Messages on Discord show up on IRC.

What about the other direction?

* Webhooks!

Discord allows you to create bots, but only using their bot API.
 
It's against their Terms of Service to automate regular user accounts. So we need to instead make use of webhooks to send messages _as_other_users_.

: It's fairly straightforward: when the bridge is started we create a webhook per-channel, and then assign the `username`, `content` and `avatar` fields.

.image building-bridges/img/irc-to-discord-cropped.gif 380 _
.caption top: IRC, bottom: Discord

# * Webhooks
# 
# Discord allows you to create bots, but only through their bot API.
# 
# It's against their Terms of Service to automate regular user accounts. So we need to instead make use of webhooks to send messages _as_other_users_.
# 
# Challenges, in a nutshell:
# - webhooks must be first registered to a channel before you can start using them
# - we can use the bot API to create webhooks
# - you can 
# - working around some Android bugs

# .image building-bridges/img/webhook.png

* All these features can be found in go-discord-irc

: All those features can be found in "go-discord-irc", which is a project that I started about two years ago, in May 2017.

.image building-bridges/img/github-qaisjp-repo.png _ 875


* What's next?

: What next? Don't use go-discord-irc.

* matterbridge, a superior chat bridge created by 42wim.

Merge all features of [[https://github.com/qaisjp/go-discord-irc][qaisjp/go-discord-irc]] into [[https://github.com/42wim/matterbridge][42wim/matterbridge]]!

.image building-bridges/img/matterbridge.gif
.image building-bridges/img/matterbridge-caption.png 100 _

It's supports loads of different platforms, not just Slack and Discord.

A few pull requests have already been sent & merged, with plenty more to come.

# .play building-bridges/syncmap/main.go /func main/,
# .code building-bridges/exec/getenv/main.go /func main/,
# .link https://tip.golang.org/pkg/net/http/#Client.Transport
